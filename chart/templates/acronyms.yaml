---
apiVersion: v1
kind: Namespace
metadata:
  name: acronyms

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: acronyms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: acronyms
          args:
            - --host
            - "0.0.0.0"
          env:
            - name: POSTGRES_DB
              value: boops
            - name: POSTGRES_HOST
              value: postgres
            - name: POSTGRES_PASSWORD
              value: oodriebum
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: scruffaluff
          image: "acronyms:0.1.0"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: acronyms
spec:
  # Create 1 pod which matches the template.
  replicas: 1
  selector:
    matchLabels:
      # Associates each pod with an "app: postgres" label to the deployment.
      app: postgres
  # Template is a nested Kubernetes object since it has its own metadata and
  # specification.
  template:
    metadata:
      labels:
        # Adds the "app: postgres" label to each pod.
        app: postgres
    spec:
      containers:
        - name: postgres
          env:
            - name: POSTGRES_DB
              value: boops
            - name: POSTGRES_PASSWORD
              value: oodriebum
            - name: POSTGRES_USER
              value: scruffaluff
          image: "postgres:14.1"
          ports:
            - containerPort: 5432
          resources:
            # Defines largest amount of resources allowed for the object.
            limits:
              cpu: "2"
              memory: "512M"
            # Defines smallest amount of resources required for the object.
            requests:
              cpu: "1"
              memory: "256M"
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database
      volumes:
        - name: database
          persistentVolumeClaim:
            claimName: postgres

---
# Requires a separate ingress controller to work. In Minikube, run command
# "minikube addons enable ingress" to establish an ingress controller.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend
  namespace: acronyms
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000
      host: acronyms-127-0-0-1.nip.io
  tls:
    - hosts:
        - acronyms-127-0-0-1.nip.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: init
  namespace: acronyms
spec:
  # Number of attemps job may perform before labeled as failed.
  backoffLimit: 4
  template:
    spec:
      containers:
        - name: curl
          command:
            - curl
            - http://backend:8000/love/wine?rating=5
          image: "curlimages/curl:7.80.0"
      # Never causes the pod to be recreated on failure if under the
      # backoffLimit, while OnFailure restarts the container if under the
      # backoffLimit.
      restartPolicy: Never

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres
  namespace: acronyms
spec:
  accessModes:
    # Restricts IO access to a single pod.
    - ReadWriteOnce
  resources:
    # Defines largest amount of resources allowed for the object.
    limits:
      storage: 4Gi
    # Defines smallest amount of resources required for the object.
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: acronyms
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    app: backend
  type: LoadBalancer

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: acronyms
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    # Must match the template metadata label.
    app: postgres
  type: LoadBalancer
