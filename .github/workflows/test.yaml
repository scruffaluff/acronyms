# GitHub Actions workflow file.
#
# For more information, visit
# https://docs.github.com/actions/learn-github-actions.

name: test

# Trigger workflow on push or pull request to the develop, main, and master
# branches.
on:
  pull_request:
    branches:
      - develop
      - main
      - master
  push:
    branches:
      - develop
      - main
      - master

jobs:
  test-unit:
    name: >-
      Run unit test suite for Node ${{ matrix.node }} and Python ${{
      matrix.python }}
    strategy:
      fail-fast: false
      matrix:
        node: ["16.17", "18.10"]
        python: ["3.9", "3.10"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Install Python interpreter
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: .venv
          key: >-
            python-${{ matrix.python }}_poetry-${{ hashFiles('poetry.lock') }}
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip poetry setuptools wheel
          poetry config virtualenvs.in-project true
          poetry install -v
      - name: Install Node interpreter
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node packages
        uses: actions/cache@v2
        with:
          path: node_modules
          key: >-
            node-${{ matrix.node }}_npm-${{ hashFiles('package-lock.json') }}
      - name: Install Node packages
        run: npm ci
      - name: Build frontend assets
        run: npm run build
      - name: Run test suite
        run: poetry run pytest --cov

  test-e2e:
    name: Run end to end test suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install Python interpreter
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: .venv
          key: >-
            python-3.10_poetry-${{ hashFiles('poetry.lock') }}
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip poetry setuptools wheel
          poetry config virtualenvs.in-project true
          poetry install -v
      - name: Install browser and open to create security database
        run: |
          poetry run playwright install chromium
          poetry run python scripts/open_browser.py
      - name: Install dependencies
        run: |
          bash scripts/install_dependencies.sh
          mkcert -install
      - name: Create K3d Kubernetes cluster
        run: bash scripts/create_cluster.sh
      - name: Build and push Docker images
        run: |
          image='registry.localhost:5001/scruffaluff/acronyms:latest'
          docker build -t "${image}" .
          docker push "${image}"
      - name: Deploy Helm release
        run: helm install --values chart/values_ci.yaml acronyms ./chart
      - name: Run end to end test suite
        run: |
          kubectl wait --namespace acronyms \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/name=acronyms \
            --timeout=90s
          poetry run pytest -m e2e
