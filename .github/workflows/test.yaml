# GitHub Actions workflow file.
#
# For more information, visit
# https://docs.github.com/actions/learn-github-actions.

---
name: test

# Makes workflow run on pull request or push to the main or develop branches.
on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      debug:
        default: false
        description: Use Tmate session for debugging
        type: boolean

env:
  NPM_CONFIG_CACHE: "${{ github.workspace }}/.cache/npm"
  NPM_CONFIG_STORE_DIR: "${{ github.workspace }}/.cache/pnpm/store"
  PIP_CACHE_DIR: "${{ github.workspace }}/.cache/pip"
  PIP_DISABLE_PIP_VERSION_CHECK: "true"
  PIP_ROOT_USER_ACTION: ignore
  PLAYWRIGHT_BROWSERS_PATH: "${{ github.workspace }}/.cache/ms-playwright"
  POETRY_CACHE_DIR: "${{ github.workspace }}/.cache/pypoetry"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  PYTHON_KEYRING_BACKEND: "keyring.backends.null.Keyring"

jobs:
  chart:
    name: Run Helm chart test suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Cache packages
        uses: actions/cache@v3
        with:
          path: |
            .cache
            .venv
            node_modules
          key: >-
            node-20_python-3.10_${{ runner.os }}_pnpm-${{
            hashFiles('pnpm-lock.yaml') }}_poetry-${{ hashFiles('poetry.lock')
            }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install Node interpreter
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install Node packages
        run: |
          node --version
          corepack enable pnpm
          pnpm --version
          pnpm install --frozen-lockfile
      - name: Install Python interpreter
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Python packages
        run: |
          python --version
          python -m pip --version
          python -m pip install poetry
          poetry lock --check
          poetry install --verbose
      - name: Install browser and initialize its security database
        run: |
          poetry run playwright install --with-deps chromium
          poetry run python scripts/open_browser.py
      - name: Install dependencies
        run: |
          bash scripts/install_dependencies.sh
          mkcert -install
      - name: Create K3d Kubernetes cluster
        run: bash scripts/cluster.sh create
      - name: Deploy Helm release and wait for pods to become ready
        run: bash scripts/cluster.sh deploy
      - name: Run Helm chart test suite
        run: |
          export SSL_CERT_FILE="$(mkcert -CAROOT)/rootCA.pem"
          poetry run pytest --chart -m e2e
      - name: Upload Playwright screenshots and videos if tests fail
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-captures
          path: tests/results
          retention-days: 30
      - name: Setup Tmate session if debug enabled
        if: >-
          ${{ always() && github.event_name == 'workflow_dispatch' &&
          inputs.debug }}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3
