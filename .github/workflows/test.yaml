# GitHub Actions workflow file.
#
# For more information, visit
# https://docs.github.com/actions/learn-github-actions.

name: test

# Trigger workflow on push or pull request to the develop, main, and master
# branches.
on:
  pull_request:
    branches:
      - develop
      - main
      - master
  push:
    branches:
      - develop
      - main
      - master

jobs:
  test-backend:
    name: Run backend test suite for Python ${{ matrix.python }}
    defaults:
      run:
        working-directory: backend
    strategy:
      fail-fast: false
      matrix:
        python: ["3.9", "3.10"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Install Python interpreter
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: backend/.venv
          key: >-
            python-${{ matrix.python }}_poetry-${{
            hashFiles('backend/poetry.lock') }}
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip poetry setuptools wheel
          poetry config virtualenvs.in-project true
          poetry install -v
      - name: Run test suite
        run: poetry run pytest

  test-chart:
    name: Run Helm test suite
    env:
      ACRONYMS_POSTGRES_PASSWORD: ${{ secrets.ACRONYMS_POSTGRES_PASSWORD }}
      ACRONYMS_POSTGRES_USER: ${{ secrets.ACRONYMS_POSTGRES_USER }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install Kubectl
        run: |
          version="$(curl -LSs https://dl.k8s.io/release/stable.txt)"
          curl -LOSs "https://dl.k8s.io/release/${version}/bin/linux/amd64/kubectl"
          sudo install kubectl /usr/local/bin/kubectl
      - name: Install K3d
        run: >-
          curl -LSfs
          https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      - name: Install Helm
        uses: azure/setup-helm@v1
      - name: Create K3d Kubernetes cluster
        run: k3d cluster create --config chart/k3d.yaml
      - name: Configure K3d Kubernetes cluster
        run: |
          kubectl create secret generic acronyms \
            --from-literal database-password="${ACRONYMS_POSTGRES_PASSWORD?}" \
            --from-literal database-user="${ACRONYMS_POSTGRES_USER?}"
      - name: Build backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: "localhost:5001/scruffaluff/acronyms-backend:latest"
      - name: Build frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: "localhost:5001/scruffaluff/acronyms-frontend:latest"
      - name: Deploy Helm release
        run: helm install --values chart/ci/values.yaml acronyms ./chart
      - name: Run test suite
        run: helm test acronyms

  test-frontend:
    name: Run frontend test suite for Node ${{ matrix.node }}
    defaults:
      run:
        working-directory: frontend
    strategy:
      fail-fast: false
      matrix:
        node: ["16", "17"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Install Node interpreter
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Cache Node packages
        uses: actions/cache@v2
        with:
          path: node_modules
          key: >-
            node-${{ matrix.node }}_npm-${{
            hashFiles('frontend/package-lock.json') }}
      - name: Install Node packages
        run: npm install
      - name: Run test suite
        run: npm run test:run
