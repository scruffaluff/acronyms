# GitHub Actions workflow file.
#
# For more information, visit
# https://docs.github.com/actions/learn-github-actions.

---
name: build

# Trigger workflow on any push or pull request.
on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      debug:
        default: "false"
        description: Use TMate session for debugging on failure
        required: false

jobs:
  lint-backend:
    name: Check backend code with linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Install Python interpreter
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: backend/.venv
          key: python-3.10_poetry-${{ hashFiles('poetry.lock') }}
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip poetry setuptools wheel
          poetry config virtualenvs.in-project true
          poetry install --verbose
      - name: Lint code
        run: |
          poetry run black --check .
          poetry run pflake8 .
          poetry run mypy .

  lint-chart:
    name: Check chart code with linters
    defaults:
      run:
        working-directory: chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v2.1.0
        with:
          recursive: true
      - name: Install Helm
        uses: azure/setup-helm@v1
      - name: Install Helm plugins
        run: |
          mkdir -p "${HELM_HOME}/plugins"
          helm plugin install https://github.com/datreeio/helm-datree
      - name: Lint code
        run: |
          helm lint --strict
          helm datree test --no-record --verbose . -- --values values_local.yaml

  lint-frontend:
    name: Check frontend code with linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Install Node interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - name: Cache Node packages
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-18_npm-${{ hashFiles('package-lock.json') }}
      - name: Install Node packages
        run: npm ci
      - name: Build frontend assets
        run: npm run build
      - name: Lint code
        run: |
          npm run format:test
          npm run lint:test
          npm run build

  test:
    name: Run unit test suite for Node 18.10 and Python 3.10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
      - name: Install Python interpreter
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: .venv
          key: python-3.10_poetry-${{ hashFiles('poetry.lock') }}
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip poetry setuptools wheel
          poetry config virtualenvs.in-project true
          poetry install --verbose
          poetry run playwright install --with-deps chromium
      - name: Install Node interpreter
        uses: actions/setup-node@v2
        with:
          node-version: "18.10"
      - name: Cache Node packages
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-18.10_npm-${{ hashFiles('package-lock.json') }}
      - name: Install Node packages
        run: npm ci
      - name: Run test suite
        run: poetry run pytest --build --cov
      - name: Upload Playwright screenshots and videos if tests fail
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-captures
          path: tests/results
          retention-days: 30
      - name: Setup tmate session if job failed
        if: >-
          ${{ failure() && github.event_name == 'workflow_dispatch' &&
          github.event.inputs.debug == 'true' }}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3
